# model = "model.joblib"
# model = joblib.load("model.joblib")
# model = joblib.load(open("model.joblib", 'rb'))

model = pickle.load(open('model.sav', 'rb'))

# model = joblib.load(r'model.joblib')
~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ALUR ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

CONFUSSION MATRIX : 
                     |   Actual W   |   Actual D   |   Actual L   |
---------------------|--------------|--------------|--------------|
Predicted W          |     TP       |     FP       |     FP       |
---------------------|--------------|--------------|--------------|
Predicted D          |     FN       |     TD       |     FN       |
---------------------|--------------|--------------|--------------|
Predicted L          |     FN       |     FN       |     TL       |

~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ALUR ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
1. Pertama input valuenya
2. Masukin ke rumus si inputannya
3. Udah sesuai dengan valuenya, gak usah ada code untuk ngembaliin nilai asli dari Scaling

~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ HOME SECTION ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
'home_team' & 'away_team' : 
    {"Arsenal" : 0, "Aston Villa" : 1, "Bournemouth" : 6, "Brentford" : 7, "Brighton & Hove Albion" : 8,
    "Burnley" : 9, "Chelsea" : 12, "Crystal Palace" : 13, "Everton" : 15, "Fulham" : 16, "Liverpool" : 21,
    "Luton Town" : X, "Man. City" : 22, "Man. United" : 23, "Newcastle United" : 26, "Nott'm Forrst" : 28,
    "Sheffield United" : 32, "Tottenham Hostpur" : 37, "West Ham United" : 40, "Wolves" : 42}

'ht_home_score' --> Max : 5 | Min : 0
'ht_away_score' --> Max : 5 | Min : 0

'home_shots_on_target' --> Max : 17 | Min : 0
'away_shots_on_target' --> Max : 15 | Min : 0

'home_shots' --> Max : 44 | Min : 0
'away_shots' --> Max : 33 | Min : 0

df['home_goal_to_shot_ratio'] = df['home_shots_on_target'] / df['home_shots']
df['away_goal_to_shot_ratio'] = df['away_shots_on_target'] / df['away_shots']

df['successful_passes_home'] = df['home_passes'] - df['home_clearances']
    ==> 'home_passes' --> Max : 1015 | Min : 155
    ==> 'home_clearances' --> Max : 107 | Min : 0
df['successful_passes_away'] = df['away_passes'] - df['away_clearances']
    ==> away_passes --> Max : 976 | Min : 148
    ==> 'away_clearances' --> Max : 129 | Min : 1

df['home_disciplinary_points'] = (df['home_yellow_cards'] * 1) + (df['home_red_cards'] * 3)
df['away_disciplinary_points'] = (df['away_yellow_cards'] * 1) + (df['away_red_cards'] * 3)
    ==> 'away_yellow_cards' --> Max : 9 & Min : 0 || 'home_yellow_cards' --> Max : 7 & Min : 0
    ==> 'away_red_cards' --> Max : 2 & Min : 0 || 'home_red_cards' --> Max : 2 | Min : 0

df['total_points_prev_matches_home'] = df[[f'prev_match_{i}_points_home' for i in range(1, 6)]].sum(axis=1)
df['total_points_prev_matches_away'] = df[[f'prev_match_{i}_points_away' for i in range(1, 6)]].sum(axis=1)

df['home_touches_ratio'] = df['home_touches'] / (df['home_touches'] + df['away_touches'])
df['away_touches_ratio'] = df['away_touches'] / (df['home_touches'] + df['away_touches'])
    ==> 'home_touches' --> Max : 1160 | Min : 335
    ==> 'away_touches' --> Max : 1116 | Min : 294

df['home_clearances_ratio'] = df['home_clearances'] / (df['home_clearances'] + df['away_clearances'])
df['away_clearances_ratio'] = df['away_clearances'] / (df['home_clearances'] + df['away_clearances'])
    ==> 'home_clearances' --> Max : 107 | Min : 0
    ==> 'away_clearances' --> Max : 129 | Min : 1

df['home_tackles_ratio'] = df['home_tackles'] / (df['home_tackles'] + df['away_tackles'])
df['away_tackles_ratio'] = df['away_tackles'] / (df['home_tackles'] + df['away_tackles'])
    ==> 'home_tackles' --> Max : 48 | Min : 3
    ==> 'away_tackles' --> Max : 50 | Min : 3

df['home_offsides_ratio'] = df['home_offsides'] / (df['home_offsides'] + df['away_offsides'])
df['away_offsides_ratio'] = df['away_offsides'] / (df['home_offsides'] + df['away_offsides'])
    ==> 'home_offsides' --> Max : 14 | Min : 0
    ==> 'away_offsides' --> Max : 12 | Min : 0

~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ OTHER SECTION ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
df['performance_change_home'] = df['home_score'] - df.groupby('home_team')['home_score'].rolling(window=5, min_periods=1).mean().reset_index(0, drop=True)
df['performance_change_away'] = df['away_score'] - df.groupby('away_team')['away_score'].rolling(window=5, min_periods=1).mean().reset_index(0, drop=True)

df['possession_growth'] = df['away_possession_%'] - df['home_possession_%']
    ==> 'home_possession_%' --> Max : 0.82 | Min : 0.17
    ==> 'away_possession_%' --> Max : 0.82 | Min : 0.17

df['recent_form_home'] = df['home_score'].rolling(window=5, min_periods=1).sum().reset_index(0, drop=True)
df['recent_form_away'] = df['away_score'].rolling(window=5, min_periods=1).sum().reset_index(0, drop=True)

df['unbeaten_streak_home'] = (df['home_score'] >= df['away_score']).groupby(df['home_team']).cumsum()
df['unbeaten_streak_away'] = (df['home_score'] <= df['away_score']).groupby(df['away_team']).cumsum()

df['win_streak_home'] = (df['home_score'] > df['away_score']).groupby(df['home_team']).cumsum()
df['win_streak_away'] = (df['home_score'] < df['away_score']).groupby(df['home_team']).cumsum()

df['avg_goals_at_venue'] = df.groupby('venue')['home_score'].expanding().mean().reset_index(0, drop=True)

'result': {'W': 0, 'D': 1, 'L': 2}

referee_map : {
    'Michael Oliver' : 31
    'Andy Madley' : 25
    'Robert Jones' : 11
    'Peter Bankes' : 40 
    'Craig Pawson' : 41
    'Jarred Gillett' : 23
    'Darren England' : 21
    'Michael Salisbury' : 39
    'John Brooks' : 42 
    'Tony Harrington' : 44
    'David Coote' : 47
    'Graham Scott' : 27
    'Thomas Bramall' : 17
    'Chris Kavanagh' : 35
}

'referee' : 
{
    'Alan Wiley' : 36
    'Andre Marriner' : 0 
    'Andy D''Urso' : 34
    'Andy Taylor' : 24
    'Anthony Taylor' : 15
    'Chris Foy' : 13
    'Darren Bond' : 1
    'Dermot Gallagher' : 6
    'Graham Poll' : 12
    'Howard Webb' : 29
    'Jonathan Moss' : 22
    'Keith Stroud' : 19
    'Kevin Friend' : 2
    'Lee Mason' : 43
    'Lee Probert' : 30
    'Mark Clattenburg' : 5
    'Mark Halsey' : 20
    'Martin Atkinson' : 26
    'Michael Riley' : 18
    'Mike Dean' : 8
    'Mike Jones' : 38
    'Neil Swarbrick' : 32
    'Paul Tierney' : 14
    'Peter Walton' : 4
    'Phil Dowd' : 7
    'Rob Styles' : 3
    'Robert Madley' : 33
    'Roger East' : 45
    'Simon Hooper' : 37
    'Stephen Bennett' : 10
    'Steve Tanner' : 16
    'Stuart Attwell' : 28
    'Tim Robinson' : 46
    'Uriah Rennie' : 48 
    'William Cavanagh' : 9
}